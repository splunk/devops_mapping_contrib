[source::gitlab_webhook]
REPORT-ExtractIssue = extractIssueId
REPORT-commitBranch = commitBranch
EVAL-action = if(isnotnull('object_attributes.action'), 'object_attributes.action', if('event_name'="push", "push", null()))
EVAL-repository_organization = if(isnotnull('project.namespace'), 'project.namespace', null())
EVAL-assigned_user = if('assignees{}.username'!="", 'assignees{}.username', null())
EVAL-branch = if(('object_kind'=="merge_request" AND isnull('branch')), 'object_attributes.source_branch', if(('object_kind'=="pipeline" AND isnull('branch')), 'object_attributes.ref', if(('object_kind'=="push" AND isnotnull('ref') AND isnull('branch')), commit_branch, if(('object_kind'=="build" AND isnotnull('ref') AND isnull('branch')), ref, null))))
EVAL-commit_files_added = if(isnotnull('commits{}.added{}'), 'commits{}.added{}', null())
EVAL-closed_date = if('object_attributes.action'=="close", 'object_attributes.updated_at', null())
EVAL-commit_files_modified = if(isnotnull('commits{}.modified{}'), 'commits{}.modified{}', null())
EVAL-commit_files_removed = if(isnotnull('commits{}.removed{}'), 'commits{}.removed{}', null())
EVAL-commit_hash = if(isnotnull('commits{}.id'), 'commits{}.id', null())
EVAL-commit_message = if(isnotnull('commits{}.message'), 'commits{}.message', null())
EVAL-commit_timestamp = if(isnotnull('commits{}.timestamp'), 'commits{}.timestamp', null())
EVAL-commit_username = if(isnotnull('commits{}.author.name'), 'commits{}.author.name', null())
EVAL-repository_name = if(isnotnull('repository.name'), 'repository.name', null())
EVAL-commits_list = if(isnotnull('commits{}.id'), 'commits{}.id', null())
EVAL-submitter_user = if((isnotnull('user.username') AND 'object_attributes.action'="open"), 'user.username', null())
EVAL-submission_date = if((isnotnull('object_attributes.created_at') AND 'object_attributes.action'="open"), 'object_attributes.created_at', null())
EVAL-status_update_date = if('object_attributes.updated_at'!="", 'object_attributes.updated_at', null())
EVAL-status_current = if(isnotnull('issue.state'), 'issue.state', if(isnotnull('object_attributes.action'), 'object_attributes.action', null()))
EVAL-issue_tags = if(isnotnull('labels{}.title'), 'labels{}.title', null())
EVAL-last_updated = if("object_attributes.updated_at"="*", 'object_attributes.updated_at', strftime(_time,"%Y-%m-%d %H:%M:%S"))
EVAL-issue_subject = if(isnotnull('issue.title'), 'issue.title', if(isnotnull('object_attributes.title'), 'object_attributes.title', null()))
EVAL-issue_href = if(isnotnull('issue.url'), 'issue.url', if(isnotnull('object_attributes.url'), 'object_attributes.url', null()))
EVAL-issue_description = if(isnotnull('issue.description'), 'issue.description', if(isnotnull('object_attributes.description'), 'object_attributes.description', null()))
EVAL-issue_assignees = if(isnotnull('assignees{}.username'), 'assignees{}.username', null())
EVAL-issue_assigned_date = if(isnotnull('changes.assignees.current{}.username'), 'object_attributes.updated_at', null())
EVAL-issueNumber = if(isnotnull('issueNumber'), 'issueNumber', if(isnotnull('issue.iid'), 'issue.iid', if((('event_type'="work_item" OR 'event_type'="issue") AND isnotnull('object_attributes.iid')), 'object_attributes.iid', null())))
EVAL-current_priority = if(isnotnull('object_attributes.severity'), 'object_attributes.severity', null())
EXTRACT-release_tags = \"(tag)\"\:\"(?<release_tags>[v|0-9.]*)\"
EVAL-latest_commit_message = if(isnotnull(mvindex('commits{}.message', -1)), mvindex('commits{}.message', -1) , null())
EVAL-pr_author_login = if(('object_kind'="merge_request" AND 'object_attributes.action'="open"), 'user.username', null())
EVAL-pr_created_date = if(isnotnull('merge_request.created_at'), 'merge_request.created_at', if(('eventtype' = "Gitlab::MergeRequest" AND 'object_attributes.action'="open"), 'object_attributes.created_at', null()))
EVAL-pr_id = if(isnotnull('merge_request.iid'), 'merge_request.iid', if(('event_type' = "merge_request"), 'object_attributes.iid', null()))
EVAL-pr_message = if(isnotnull('merge_request.title'), 'merge_request.title', if(('event_type' = "merge_request"), 'object_attributes.title', null()))
EVAL-previous_push = if(isnotnull('before'), 'before', null())
EVAL-pull_request_merged = if(('merge_request.state'="merged" OR 'object_attributes.state'="merged"), "true", "false")
EVAL-pull_request_merged_at = if(('merge_request.state'="merged" OR 'object_attributes.state'="merged"), _time, null())
EVAL-release_author = if(('object_kind'="tag_push" AND isnotnull('user_username')), 'user_username', null())
EVAL-release_created_at = if(isnotnull('created_at'), 'created_at', null())
EVAL-release_name = if(isnotnull('name'), 'name', null())
EVAL-release_sender_name = if(('object_kind'="tag_push" AND isnotnull('user_username')), 'user_username', null())
EVAL-release_status = if((object_kind=release AND isnotnull('action')), 'action', null())
EVAL-release_url = if(isnotnull('url'), 'url', null())
EVAL-review_author_login = if(('object_kind'="note" AND 'object_attributes.noteable_type'="MergeRequest" AND isnotnull('object_attributes.change_position.position_type')), 'user.username', null())
EVAL-review_state = if('object_attributes.action'="approved", "approved", if(('object_attributes.noteable_type'="MergeRequest" AND isnotnull('object_attributes.change_position')), "commented", null()))
EVAL-latest_commit_hash = if(isnotnull(mvindex('commits{}.id', -1)), mvindex('commits{}.id', -1), if((isnotnull('object_attributes.sha') AND 'object_kind'="pipeline"), 'object_attributes.sha', if((isnotnull('sha') AND 'object_kind'="build"), 'sha', null())))
EVAL-latest_commit_date = if(isnotnull(mvindex('commits{}.timestamp', -1)), mvindex('commits{}.timestamp', -1) , null())
EVAL-latest_commit_author_user = if(isnotnull(mvindex('commits{}.author.email', -1)), mvindex('commits{}.author.email', -1) , null())
EVAL-files_removed = if(isnotnull('commits{}.removed{}' ), 'commits{}.removed{}' , null())
EVAL-files_modified = if(isnotnull('commits{}.modified{}'), 'commits{}.modified{}', null())
EVAL-files_added = if(isnotnull('commits{}.added{}'), 'commits{}.added{}', null())
EVAL-earliest_commit_message = if(isnotnull(mvindex('commits{}.message', 0)), mvindex('commits{}.message', 0) , null())
EVAL-earliest_commit_hash = if(isnotnull(mvindex('commits{}.id', 0)), mvindex('commits{}.id', 0) , null())
EVAL-earliest_commit_date = if(isnotnull(mvindex('commits{}.timestamp', 0)), mvindex('commits{}.timestamp', 0) , null())
EVAL-earliest_commit_author_user = if(isnotnull(mvindex('commits{}.author.email', 0)), mvindex('commits{}.author.email', 0) , null())
EVAL-current_push = if(isnotnull('after'), 'after', null())
EVAL-commits_timestamp_list = if(isnotnull('commits{}.timestamp'), 'commits{}.timestamp', null())
EVAL-commits_message_list = if(isnotnull('commits{}.message'), 'commits{}.message', null())
EVAL-commits_author_list = if(isnotnull('commits{}.author.email'), 'commits{}.author.email', null())
EVAL-asset_name = if(isnotnull('assets.links{}.name'), 'assets.links{}.name', if(isnotnull('assets.sources{}.url'), 'assets.sources{}.url', null()))
EVAL-asset_content_type = if(isnotnull('assets.links{}.link_type'), 'assets.links{}.link_type', if(isnotnull('assets.sources{}.format'), 'assets.sources{}.format', null()))
EVAL-assigned_reviewers = if(isnotnull('reviewers{}.username'), 'reviewers{}.username', null())
EVAL-id = if(('object_kind'="pipeline" OR 'object_kind'="build" ), if(isnotnull('object_attributes.id'), 'object_attributes.id', if(isnotnull('pipeline_id'), 'pipeline_id', null())), null())
EVAL-run_id = if(('object_kind'="pipeline" OR 'object_kind'="build" ), if(isnotnull('object_attributes.iid'), 'object_attributes.iid', if(isnotnull('build_id'), 'build_id', null())), null())
EVAL-status = if(('object_kind'="pipeline" OR 'object_kind'="build" ), if(isnotnull('object_attributes.status'), 'object_attributes.status', if(isnotnull('build_status'), 'build_status', null())), null())
EVAL-started_by_id = if(('object_kind'="pipeline" OR 'object_kind'="build" ), if(isnotnull('user.username'), 'user.username', null()), null())
EVAL-started_by_name = if(('object_kind'="pipeline" OR 'object_kind'="build" ), if(isnotnull('user.name'), 'user.name', null()), null())

[source::github_webhook]

[gitlab_json]

[source::gitlab_cicd]
EVAL-cve = mvfilter(match('vulnerability.identifiers{}.name', "^CVE"))
EVAL-organization = if(isnotnull(repository_organization), repository_organization, null())
EVAL-repository_name = if(isnotnull(repository_name), repository_name, null())
EVAL-severity = if(isnotnull('vulnerability.severity'), 'vulnerability.severity', null())
EVAL-severity_id = case(lower(severity)=="low",1,lower(severity)=="medium",2,lower(severity)=="high",3,lower(severity)=="critical",4,1=1,0)
EVAL-signature_id = if(isnotnull('vulnerability.description'), 'vulnerability.description', null())
EVAL-signature = if(isnotnull('vulnerability.description'), 'vulnerability.description', null())
EVAL-category = if(('scan.type'=="dependency_scanning"), "dependency", if(('scan.type'=="sast"), "code", if(('scan.type'=="secret_detection"), "secret", null())))
EVAL-url = if(isnotnull('vulnerability.identifiers{}.url'), 'vulnerability.identifiers{}.url', null())
EVAL-dest = if(isnotnull(repository_name), repository_name, null())
EVAL-vendor_product = "gitlab"
EVAL-xref = if(isnotnull('vulnerability.details.vulnerable_package.value'), 'vulnerability.details.vulnerable_package.value', null())
EVAL-alert.number = if((source=="gitlab_cicd" AND isnotnull(build_id)), build_id, null())
EVAL-action = if(isnotnull('scan.type'), 'scan.type', null())
EVAL-secret_type = if(('scan.type'="secret_detection" AND isnotnull('vulnerability.name')), 'vulnerability.name', null())
